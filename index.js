import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';
import path from 'path';
import { fileURLToPath } from 'url';
import pool from './db.js';
import authRouter from './routes/authRouter.js';
import buildRouter from './routes/buildRouter.js';
import basketRouter from './routes/basketRouter.js';
import favoriteRouter from './routes/favoriteRouter.js';
import orderRouter from './routes/orderRouter.js';
import productRouter from './routes/productRouter.js';
import runMigrations from './db-migrations.js';
import bodyParser from 'body-parser';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3001;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const allowedOrigins = [
  'https://ps-client.vercel.app',
  'https://ps-client-git-main-misha4322s-projects.vercel.app',
  'http://localhost:5173'
];

app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.error(`–ó–∞–ø—Ä–æ—Å —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${origin}`);
      callback(new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π CORS'));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
  next();
});
app.get('/', (req, res) => {
  res.send('API –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –ü–ö —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.use('/api/auth', authRouter);
app.use('/api/builds', buildRouter);
app.use('/api/basket', basketRouter);
app.use('/api/favorites', favoriteRouter);
app.use('/api/orders', orderRouter);
app.use('/api/components', productRouter);
app.get('/api/builds/:id/components', async (req, res) => {
  try {
    const buildId = req.params.id;
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ ID: ${buildId}`);
    const { rows } = await pool.query(
      `SELECT c.* 
       FROM build_components bc
       JOIN components c ON bc.component_id = c.id
       WHERE bc.build_id = $1`,
      [buildId]
    );
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${rows.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ ${buildId}`);
    res.json(rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
app.post('/api/basket/sync', async (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }

  try {
    const { userId } = jwt.verify(token, process.env.JWT_SECRET);
    const { items } = req.body;

    await pool.query('BEGIN');
    await pool.query('DELETE FROM cart WHERE user_id = $1', [userId]);

    for (const item of items) {
      await pool.query(
        `INSERT INTO cart (user_id, build_id, quantity)
         VALUES ($1, $2, $3)`,
        [userId, item.build_id, item.quantity]
      );
    }
    await pool.query('COMMIT');

    const { rows } = await pool.query(
      `SELECT c.id, c.build_id, c.quantity, b.name, b.image_url, b.total_price
       FROM cart c
       JOIN builds b ON c.build_id = b.id
       WHERE c.user_id = $1`,
      [userId]
    );

    res.json(rows.map(row => ({
      id: row.id,
      build_id: row.build_id,
      quantity: row.quantity,
      name: row.name,
      image_url: row.image_url,
      total_price: row.total_price
    })));
  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫' });
    }
       if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});
app.use((err, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫:', err);

  if (err.name === 'UnauthorizedError') {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }

  if (err.name === 'ValidationError') {
    return res.status(400).json({ 
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      errors: err.errors 
    });
  }

  if (err.code === '23505') {
    return res.status(409).json({ 
      message: '–î—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å',
      field: err.constraint.split('_')[1]
    });
  }

  res.status(err.status || 500).json({ 
    message: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && {
      stack: err.stack
    })
  });
});

app.use((req, res) => {
  res.status(404).json({ message: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

async function startServer() {
  try {
    await pool.query('SELECT NOW()');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    await runMigrations();

    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`   URL: http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();